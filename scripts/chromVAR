#!/usr/bin/env Rscript

suppressPackageStartupMessages({
    library(chromVAR)
    library(motifmatchr)
    library(BSgenome.Hsapiens.UCSC.hg19)
    library(BSgenome.Mmusculus.UCSC.mm9)
    library(SummarizedExperiment)
})

# library(gplots) 
# library(RColorBrewer)
library(optparse)

option_list = list(
    make_option(c("-i", "--inputdir"), type="character"),
    make_option(c("-o", "--outdir"), type='character', default=''),
    make_option(c("-g", "--genome"), type='character', default='hg19'),
    make_option(c("--process"), type='logical', default=FALSE)
); 

opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);


apply_chromVAR=function(counts, peaks, assignments){
    counts = SummarizedExperiment(assays=list(counts=as.matrix(counts)),
                                       colData=DataFrame(assignments = assignments),
                                       rowRanges=peaks)
    counts = addGCBias(counts, genome = genome)
    counts = filterPeaks(counts, non_overlapping=T)
    print('filtered counts dim')
    print(dim(counts))
    motifs <- getJasparMotifs(species=species)
    motif_ix <- matchMotifs(motifs, counts, genome = genome)
    devTopPeaks <- computeDeviations(object = counts, 
                                 annotations = motif_ix)
    return(devTopPeaks)
}

get_dev=function(counts, peaks){
    if (opt$process){
        out = process(counts, peaks)
        counts = out[[1]];
        peaks = out[[2]];
    }
    print('raw counts dim')
    print(dim(counts))
    devTopPeaks = apply_chromVAR(counts, peaks, assignments)
    variabilityTopPeaks = computeVariability(devTopPeaks)
    devTopPeaks.scores = deviationScores(devTopPeaks)
    write.table(devTopPeaks.scores, paste0(outdir, '/dev.txt'), quote=F, sep='\t')
    write.table(variabilityTopPeaks, paste0(outdir, '/var.txt'), quote=F, sep='\t')
    # plot_heatmap(devTopPeaks.scores, variabilityTopPeaks)
}

process = function(counts, peaks, cutoff=800){
    index = which(width(peaks) <= cutoff)
    peaks = peaks[index]
    peaks = resize(peaks, width = 500, fix = "center")
    counts = counts[index,]
    return(list(counts, peaks))
}



genome = opt$genome
if(opt$genome=='hg19'){
    genome = BSgenome.Hsapiens.UCSC.hg19
    species = 'Homo sapiens'
} else if (opt$genome=='mm9'){
    genome = BSgenome.Mmusculus.UCSC.mm9
    species = 'Mus musculus'
} else { print('Self defined genome')}

inputdir = opt$inputdir
if(opt$outdir!=''){
    outdir = opt$outdir
}else{
    outdir = inputdir
}
dir.create(outdir, recursive=TRUE, showWarnings=FALSE)

data_file = paste0(inputdir, '/imputed_data.txt')
assign_file = paste0(inputdir, '/cluster_assignments.txt')
peak_file = paste0(inputdir, '/specific_peaks.txt')

counts = read.table(data_file, row.names=1, header=T)
assignments = read.table(assign_file)$V2
peaks = getPeaks(peak_file, sort_peaks=T) 

#peak_index = read.table(peak_file, sep='\t', header=F)
peak_index = as.data.frame(peaks)
peak_index = paste(peak_index$seqnames, peak_index$start-1, peak_index$end, sep='_')
#peak_index = paste(peak_index[,1], peak_index[,2], peak_index[,3], sep='_')

index = row.names(counts)%in%peak_index
counts = counts[index,]
get_dev(counts, peaks)

